#!/usr/bin/env bash

set -o errexit  # -e
set -o errtrace  # -E
set -o nounset  # -u
set -o pipefail

KOOPA_PREFIX="${KOOPA_PREFIX:-/opt/koopa}"
PATH="${KOOPA_PREFIX}/bin:/usr/local/bin:/usr/bin:/bin"
export PATH

# shellcheck source=/dev/null
source "$(koopa header bash)"

main() {
    # """
    # Install dotfiles.
    # @note Updated 2025-08-26.
    # """
    local -A app dict
    [[ -d "${HOME:-}" ]] || return 1
    app['chezmoi']="$(koopa_locate_chezmoi)"
    koopa_assert_is_executable "${app[@]}"
    dict['prefix']="$(koopa_script_parent_dir)"
    dict['chezmoi_prefix']="${dict['prefix']}/chezmoi"
    dict['xdg_config_home']="$(koopa_xdg_config_home)"
    dict['xdg_data_home']="$(koopa_xdg_data_home)"
    koopa_assert_is_dir \
        "${dict['chezmoi_prefix']}" \
        "${dict['xdg_config_home']}" \
        "${dict['xdg_data_home']}"
    koopa_add_config_link "${dict['prefix']}" 'dotfiles'
    # > if koopa_is_linux
    # > then
    # >     koopa_rm "${dict['xdg_data_home']}/zsh"
    # > fi
    if [[ -d "${HOME}/.ssh" ]]
    then
        koopa_chmod '0700' "${HOME}/.ssh"
        if [[ -f "${HOME}/.ssh/authorized_keys" ]]
        then
            koopa_chmod '0600' "${HOME}/.ssh/authorized_keys"
        fi
        if [[ -f "${HOME}/.ssh/config" ]]
        then
            koopa_chmod '0600' "${HOME}/.ssh/config"
        fi
    fi
    (
        koopa_cd "${dict['chezmoi_prefix']}"
        "${app['chezmoi']}" \
            --force \
            --no-pager \
            --source="${dict['chezmoi_prefix']}" \
            --verbose \
            apply
    )
    (
        koopa_cd "${HOME:?}"
        if [[ ! -L '.zprofile' ]]
        then
            koopa_ln --verbose \
                "${dict['xdg_config_home']}/zsh/.zprofile" \
                '.zprofile'
        fi
        if [[ ! -L '.zshrc' ]]
        then
            koopa_ln --verbose \
                "${dict['xdg_config_home']}/zsh/.zshrc" \
                '.zshrc'
        fi
    )
    if koopa_is_macos
    then
        # Code.
        (
            koopa_mkdir "${HOME}/Library/Application Support/Code/User"
            koopa_cd "${HOME}/Library/Application Support/Code/User"
            if [[ ! -L 'keybindings.json' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/Code/User/keybindings.json" \
                    'keybindings.json'
            fi
            if [[ ! -L 'settings.json' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/Code/User/settings.json" \
                    'settings.json'
            fi
        )
        # McFly.
        (
            koopa_mkdir "${HOME}/Library/Application Support/McFly"
            koopa_cd "${HOME}/Library/Application Support/McFly"
            if [[ ! -L 'config.toml' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/mcfly/config.toml" \
                    'config.toml'
            fi
        )
        # Positron.
        (
            koopa_mkdir "${HOME}/Library/Application Support/Positron/User"
            koopa_cd "${HOME}/Library/Application Support/Positron/User"
            if [[ ! -L 'settings.json' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/Positron/User/settings.json" \
                    'settings.json'
            fi
        )
        # nushell.
        (
            if [[ -L "${HOME}/Library/Application Support/nushell" ]]
            then
                koopa_rm "${HOME}/Library/Application Support/nushell"
            fi
            koopa_mkdir "${HOME}/Library/Application Support/nushell"
            koopa_cd "${HOME}/Library/Application Support/nushell"
            if [[ ! -L 'config.nu' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/nushell/config.nu" \
                    'config.nu'
            fi
            if [[ ! -L 'env.nu' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/nushell/env.nu" \
                    'env.nu'
            fi
        )
        # ruff.
        (
            if [[ -L "${HOME}/Library/Application Support/ruff" ]]
            then
                koopa_rm "${HOME}/Library/Application Support/ruff"
            fi
            koopa_mkdir "${HOME}/Library/Application Support/ruff"
            koopa_cd "${HOME}/Library/Application Support/ruff"
            if [[ ! -L 'pyproject.toml' ]]
            then
                koopa_ln --verbose \
                    "${dict['xdg_config_home']}/ruff/pyproject.toml" \
                    'pyproject.toml'
            fi
        )
    fi
    return 0
}

main "$@"
